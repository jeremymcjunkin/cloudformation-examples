Description: >

  Deploys a highly available ECS cluster using an AutoScaling Group,
  with ECS hosts distributed across multiple Availability Zones.

  2 zones were chosen because it's the min to be highly-available

Parameters:
  NestedStacksS3Bucket:
    Description: The name of the versioned S3 bucket you created to hold nested stack temlpates
    Type: String
    Default: s3.us-east-1.amazonaws.com/cf.clearskyconsultingllc.com

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: t3.nano

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 0

  ClusterMinSize:
    Description: Minimum number of ECS hosts to keep around?
    Type: Number
    Default: 0

  ClusterMaxSize:
    Description: Maximum number of ECS hosts to have?
    Type: Number
    Default: 0

  VpcId:
    Description: The VPC to run the cluster in
    Type: AWS::EC2::VPC::Id

  PrivateSubnetIds:
    Description: The private subnets to create the cluster in
    Type: List<AWS::EC2::Subnet::Id>


Mappings: 
  NestedStacks: 
    infrastructure: 
      "secgroups": "security-groups/ecs-in-vpc.yaml?versionid=_ejNaICfshC5h27DQQYPFue79VNH6A9r"  
      "ecscluster": "ecs/cluster-in-vpc.yaml?versionid=XjyMRnYbADJgEgD2_ycMPLedhfH1PsTW"
    
  # These are the latest ECS optimized AMIs as of 4/5/2019:
  #
  #   amzn-ami-2017.09.i-amazon-ecs-optimized
  #   ECS agent:    1.26.0
  #   Docker:       18.06.1-ce
  #   ecs-init:     1.26.0-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)
  AWSRegionToAMI:
    us-east-2:
        AMI: ami-0aa9ee1fc70e57450
    us-east-1:
        AMI: ami-007571470797b8ffa
    us-west-2:
        AMI: ami-0302f3ec240b9d23c
    us-west-1:
        AMI: ami-0935a5e8655c6d896
    # visit doc above to add more regions

Conditions:
  ClusterSizeNotZero: !Not [ !Equals [ !Ref ClusterSize, 0 ] ]

Resources:
  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - https://${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, secgroups] }

      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !Ref VpcId
  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - https://${NestedStacksS3Bucket}/nested-stacks/${url}
        - { url: !FindInMap [NestedStacks, infrastructure, ecscluster] }

      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: !Ref InstanceType
        ClusterMinSize: !Ref ClusterMinSize
        ClusterSize: !Ref ClusterSize
        ClusterMaxSize: !Ref ClusterMaxSize
        VPC: !Ref VpcId
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        # for some reason, having to join these values otherwise we get an obscure error
        Subnets: !Join [ ",", !Ref PrivateSubnetIds ]
        ECSImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]

  CPUReservationScaleUpPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Condition: ClusterSizeNotZero
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !GetAtt ECS.Outputs.ECSAutoScalingGroup
        Cooldown: '1800'
        ScalingAdjustment: '1'

  CPUReservationScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Condition: ClusterSizeNotZero
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !GetAtt ECS.Outputs.ECSAutoScalingGroup
        Cooldown: '900'
        ScalingAdjustment: '-1'

Outputs:
  Version:
    Description: ECS cluster in a VPC
    Value: 1.0.0
