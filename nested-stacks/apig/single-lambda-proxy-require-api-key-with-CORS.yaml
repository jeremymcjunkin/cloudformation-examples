#TODO: add 4xx,5xx errors.  Test binary
AWSTemplateFormatVersion: '2010-09-09'

Description: API Gateway that points to a single Lambda via proxy+.  Supports CORS.  Has application/protobuf defined as binary.

Parameters:

  Stage:
    Description: Deployment stage
    Type: String

  Repo:
    Description: Code repo
    Type: String

  Branch:
    Description: Code branch
    Type: String  

  LambdaName:
    Description: Lambda function name (should not exist).  This value will be prepended with [Repo]--[Branch]--
    Type: String

Resources:  
  APIGCloudWatchRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"    

  APIGAccount: 
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt APIGCloudWatchRole.Arn

  #### Can't add lambda invoke permission to APIG cuz Lambda dont exist yet. Permission will be added during build. Per https://stackoverflow.com/questions/39905255/how-can-i-grant-permission-to-api-gateway-to-invoke-lambda-functions-through-clo

  ApiGatewayLambdaProxy:
    Type : AWS::ApiGateway::RestApi
    Properties :
        Name : !Sub ${Stage}--${Repo}--${Branch}--${LambdaName}
        Description: "Single Lambda proxy"        
        # BinaryMediaTypes: - this is broken in CloudFormation on create
        # - "application/protobuf"
        Parameters:
          endpointConfigurationTypes: EDGE
        Body :          
          swagger: "2.0"
          info:
            version: "2018-01-23T15:50:43Z"
            title: "Lambda Proxy"
          schemes:
            - "https"
          paths:
            "/{proxy+}":
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Cache-Control:
                        type: "string"
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Max-Age:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Cache-Control: "'max-age=604800'"
                        method.response.header.Access-Control-Max-Age: "'604800'"
                        method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  type: "mock"
              x-amazon-apigateway-any-method:
                produces:
                - "application/json"
                parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                responses: {}
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Repo}--${Branch}--${LambdaName}:${Stage}/invocations
                  responses:
                    default:
                      statusCode: "200"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
          securityDefinitions:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"                  
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
          x-amazon-apigateway-binary-media-types:
          - "application/protobuf"
  
  APIGDeployment: 
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: 
        Ref: "ApiGatewayLambdaProxy"
      Description: "Deployment"
      StageName: !Sub ${Stage}

Outputs:
  Version:
    Description: APIG-Single-Lambda-proxy-with-CORS template version
    Value: 1.0.0

  APIGID:
    Description: APIG root resource ID
    Value: !Ref ApiGatewayLambdaProxy

  APIGURL:
    Description: APIG stage URL
    Value: !Sub
      - https://${apigId}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
      - { apigId: !Ref ApiGatewayLambdaProxy }

  APIGLambdaInvocationArn:
    Description: ARN of lambda that will be called from APIG
    Value: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Repo}--${Branch}--${LambdaName}:${Stage}/invocations